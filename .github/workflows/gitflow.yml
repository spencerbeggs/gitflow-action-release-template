name: "Prepare release"
on:
  push:
    branches:
      - "release/[0-9]+.[0-9]+.[0-9]+"
      - "hotfix/[0-9]+.[0-9]+.[0-9]+"
jobs:
  initialize:
    name: Initialize release
    runs-on: ubuntu-latest
    steps:
      - name: Create pull request to develop
        id: pull-request-develop
        if: ${{ github.event.created }}
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: develop
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: ${{ steps.meta.outputs.canary }}
          pr_draft: false
      - name: Create pull request to main
        id: pull-request-main
        if: ${{ github.event.created }}
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: ${{ steps.meta.outputs.branch }}
          pr_draft: false
      - name: Bump version
        if: ${{ github.event.created }}
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          yarn version --new-version ${{ steps.meta.outputs.version }} --no-git-tag-version
          git add package.json
          git commit --message "Bump to ${{ steps.meta.outputs.version }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"
          git push origin ${{ steps.meta.outputs.branch }}
  test:
    name: Test release code
    runs-on: ubuntu-latest
    needs: initialize
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set metadata
        id: meta
        run: |
          RELEASE_TYPE=$(echo "$GITHUB_REF" | awk -F / '{print $3}')
          RELEASE_TAG=$(echo "$GITHUB_REF" | awk -F / '{print $4}')
          echo ::set-output name=type::"$RELEASE_TYPE"
          echo ::set-output name=tag::"$RELEASE_TAG"
          echo ::set-output name=version::"v$RELEASE_TAG"
          echo ::set-output name=branch::"$RELEASE_TYPE/$RELEASE_TAG"
          echo ::set-output name=canary::"canary/$RELEASE_TAG"
          echo "::set-output name=os::$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=yarn_dir::$(yarn cache dir)"
          echo "::set-output name=yarn_version::v$(yarn --version | tr '.' '-')"
          echo "::set-output name=node::$(node --version | tr '.' '-')"
      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: "14"
      - name: Get Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        env:
          cache: cache
        with:
          path: ${{ steps.meta.outputs.yarn_dir }}
          key: ${{ steps.meta.outputs.os }}-yarn-${{ steps.meta.outputs.yarn_version }}-${{ env.cache }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ steps.meta.outputs.os }}-yarn-${{ steps.meta.outputs.yarn_version }}-${{ env.cache }}-
            ${{ steps.meta.outputs.os }}-yarn-${{ steps.meta.outputs.yarn_version }}-
            ${{ steps.meta.outputs.os }}-yarn-
            ${{ steps.meta.outputs.os }}-
      - name: Get node_modules cache
        uses: actions/cache@v2
        id: node-modules-cache
        env:
          cache: cache
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ steps.meta.outputs.os }}-node-${{ steps.meta.outputs.node }}-${{ env.cache }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ steps.meta.outputs.os }}-node-${{ steps.meta.outputs.node }}-${{ env.cache }}-
            ${{ steps.meta.outputs.os }}-node-${{ steps.meta.outputs.node }}-
            ${{ steps.meta.outputs.os }}-node-
            ${{ steps.meta.outputs.os }}-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true' && steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --production=false --frozen-lockfile
      - name: Lint code
        run: yarn lint
      - name: Unit tests
        run: yarn test
